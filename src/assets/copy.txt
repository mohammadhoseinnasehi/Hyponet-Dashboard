<template>
  <div>
    <h1 class="subheading grey--text">پنل مدیریتی</h1>
    <v-container>
      <v-layout row wrap>
        <v-flex sm6 xs12 md6 lg3>
          <v-card class="ma-3" color="grey">
            <v-list-item>
              <v-list-item-avatar class="mt-n7" tile >
                <v-sheet color="green" width="80" height="80" elevation="10">
                  <v-icon dark large class="pl-10">store</v-icon>
                </v-sheet>
              </v-list-item-avatar>
              <v-list-item-content>
                <div class="text-right overline">نوشته</div>
                <v-list-item-title class="headline mb-1 text-right"
                  >ایران</v-list-item-title
                >
                <div><v-divider></v-divider></div>
              </v-list-item-content>
            </v-list-item>
            <v-card-actions>
              <v-icon text class="ma-2">person</v-icon>
              <div class="overline">شخص</div>
            </v-card-actions>
          </v-card>
        </v-flex>
      </v-layout>
    </v-container>
  </div>
</template>
**************************************************************************
<template>
  <v-row justify="center">
    <v-dialog v-model="dialog" persistent max-width="800px">
      <template v-slot:activator="{ on }">
        <v-btn outlined color="teal lighten-3" dark v-on="on">
          افزودن یک پروژه
        </v-btn>
      </template>
      <v-card>
        <v-card-title>
          <span class="headline">مشخصات</span>
        </v-card-title>
        <v-form class="px-3" ref="form">
          <v-card-text>
            <v-text-field
              label="عنوان"
              v-model="title"
              prepend-icon="folder"
            ></v-text-field>
            <v-text-field
              label="توضیحات"
              v-model="content"
              prepend-icon="edit"
            ></v-text-field>
            <v-col cols="12" lg="6">
              <v-menu
                ref="menu1"
                v-model="menu1"
                :close-on-content-click="false"
                transition="scale-transition"
                offset-y
                max-width="290ox"
                min-width="290px"
              >
                <template v-slot:activator="{ on }">
                  <v-text-field
                    v-model="date"
                    label="تاریخ"
                    hint="MM/DD/YY format"
                    prepend-icon="event"
                    v-on="on"
                  >
                  </v-text-field>
                </template>
                <v-date-picker
                  v-model="date"
                  no-title
                  @input="menu1 = true"
                ></v-date-picker>
                <!-- <v-date-picker v-model="date"></v-date-picker> -->
              </v-menu>
            </v-col>
          </v-card-text>
          <v-card-actions>
            <v-space></v-space>
            <v-btn color="blue darken-1" text @click="dialog = false"
              >بستن</v-btn
            >
            <v-btn text color="green" @click="submit" outlined>ثبت</v-btn>
          </v-card-actions>
        </v-form>
      </v-card>
    </v-dialog>
  </v-row>
</template>
<script>
export default {
  name: "Modal",
  data() {
    return {
      dialog: false,
      title: "",
      content: "",
      date: null,
      // date: new Date().toString().substr(0, 10),
      // dateFormatted: this.formatDate(new Date().toISOString().substr(0, 10)),
      menu1: false,
    };
  },
  // methods: {
  // formatDate(date) {
  //   if (!date) return null;
  //   const [year, month, day] = date.split("-");
  //   return `${year}/${month}/${day}`;
  // },
  //   parseDate(date) {
  //     if (!date) return null;
  //     const [year, month, day] = date.split("/");
  //     return `${year}-${month.padStart(2, "0")}-${day.padStart(2, "0")}`;
  //   },
  // },
  // computed: {
  //   computedDateFormatted() {
  //     return this.formatDate(this.date);
  //   },
  // },
  // watch: {
  //   date() {
  //     this.dateFormatted = this.formatDate(this.date);
  //   },
  // },
};
</script>
**************************************************************************
<template>
  <nav>
    <v-app-bar color="red" app dark>
      <v-app-bar-nav-icon @click="drawer = !drawer"> </v-app-bar-nav-icon>
      <v-toolbar-title class="text-uppercace">
        <span class="font-weight-light">ایران</span>
      </v-toolbar-title>
      <v-menu :offset-y="offset">
        <template v-slot:activator="{ on, attrs }">
          <v-btn color="orange" dark v-bind="attrs" v-on="on" class="mx-16">
            صفحات
          </v-btn>
        </template>
        <v-list flat class="mt-10">
          <v-list-item
            v-for="link in links"
            :key="link.text"
            router
            :to="link.route"
            active-class="active"
            dense="true"
          >
            <v-list-item-title>{{ link.text }}</v-list-item-title>
          </v-list-item>
        </v-list>
      </v-menu>
      <v-spacer></v-spacer>

      <v-btn text>
        <span>خروج</span>
        <v-icon right>exit_to_app</v-icon>
      </v-btn>
    </v-app-bar>
    <v-navigation-drawer v-model="drawer" right app dark class="red darken-4">
      <v-layout column align-center>
        <v-flex class="mt-5">
          <v-avatar size="100">
            <v-img src="../assets/userphoto.jpg"></v-img>
          </v-avatar>
          <p class="white--text subheading mt-1 text-center">محمدحسین</p>
        </v-flex>
        <v-flex class="mt-4 mb-4">
          <Modal />
        </v-flex>
      </v-layout>
      <v-list flat>
        <v-list-item
          v-for="link in links"
          :key="link.text"
          router
          :to="link.route"
          active-class="active"
        >
          <v-list-item-action>
            <v-icon>{{ link.icon }}</v-icon>
          </v-list-item-action>
          <v-list-item-content>
            <v-list-item-title>
              {{ link.text }}
            </v-list-item-title>
          </v-list-item-content>
        </v-list-item>
      </v-list>
    </v-navigation-drawer>
  </nav>
</template>
<script>
import Modal from "./Modal.vue";
export default {
  name: "Navbar",
  components: {
    Modal,
  },
  data() {
    return {
      drawer: true,
      links: [
        { icon: "dashboard", text: "داشبورد", route: "/" },
        { icon: "folder", text: "پروژه ها", route: "/projects" },
        { icon: "person", text: "تیم", route: "/team" },
      ],
    };
  },
};
</script>
<style>
/* html {
  overflow-y: auto;
} */
.active {
  border-right: 5px solid rgba(0, 0, 0, 0.836);
  background-color: rgb(109, 0, 0);
}
</style>
**************************************************************************
<template>
  <v-footer padless app dark inset>
    <v-card class="flex" tile flat color="grey" :elevation="10">
      <v-card-text class="py-2 white--text text-center">
        {{ new Date().getFullYear() }} - <strong>ایران</strong>
      </v-card-text>
    </v-card>
  </v-footer>
</template>
<script>
export default {
  name: "Footer",
};
</script>
*********************************SideBar***********************************
body::-webkit-scrollbar {
    width: 10px;
}

body::-webkit-scrollbar-track {
    background-color: rgb(119, 119, 119);
}

body::-webkit-scrollbar-track:hover {
    background-color: rgb(238, 3, 3);
}

body::-webkit-scrollbar-thumb {
    background-color: rgb(0, 0, 0);
    border-radius: 20px;
    height: 20px;
}
********************************************************************
<template>
  <v-autocomplete
    v-model="values"
    :items="items"
    deletable-chips
    chips
    color="rgb(1, 8, 77)"
    item-color="rgb(1, 8, 77)"
    rounded
    solo
    prefix="دسته بندی ها :"
    multiple
  ></v-autocomplete>
</template>
<script>
export default {
  name: "AutoComplete",
  data() {
    return {
      items: ["4", "3", "2", "1"],
      values: [],
    };
  },
  methods: {},
};
</script>
<style lang="scss" >
.v-menu__content {
  border-radius: 20px !important;
}
</style>
*******************************Add Frame***********************************
<template>
  <v-row justify="center">
    <v-dialog
      v-model="$store.state.show"
      transition="dialog-bottom-transition"
      persistent
      :scrollable="true"
      max-width="1000px"
    >
      <v-card max-height="600px">
        <v-toolbar color="rgb(1, 8, 50)">
          <v-toolbar-title class="white--text"
            ><h5>افزودن طرح</h5></v-toolbar-title
          >
          <v-spacer></v-spacer>
          <v-btn icon class="" dark @click.stop="hide()">
            <v-icon>mdi-close</v-icon>
          </v-btn>
        </v-toolbar>
        <v-card-text>
          <v-container>
            <v-row>
              <v-col cols="12" lg="6">
                <v-text-field
                  v-model="name"
                  label="نام طرح"
                  filled
                  rounded
                  dense
                ></v-text-field>
              </v-col>
              <v-col cols="12" lg="6">
                <v-menu
                  v-model="menu"
                  :close-on-content-click="false"
                  transition="scale-transition"
                  absolute
                  offset-y
                  min-width="290px"
                >
                  <template v-slot:activator="{ on, attrs }">
                    <v-text-field
                      :value="dateformatted"
                      label="تاریخ ثبت"
                      filled
                      rounded
                      dense
                      append-icon="mdi-calendar"
                      readonly
                      v-bind="attrs"
                      v-on="on"
                    ></v-text-field>
                  </template>
                  <v-date-picker
                    v-model="date"
                    locale="fa"
                    no-title
                    :first-day-of-week="6"
                  >
                  </v-date-picker>
                </v-menu>
              </v-col>
              <v-col cols="12" lg="12">
                <v-autocomplete
                  v-model="values"
                  :items="items"
                  deletable-chips
                  chips
                  color="rgb(1, 8, 77)"
                  item-color="rgb(1, 8, 77)"
                  rounded
                  filled
                  prefix="دسته بندی ها :"
                ></v-autocomplete>
              </v-col>
              <v-col cols="12" lg="12">
                <v-textarea
                  label="توضیحات"
                  v-model="description"
                  auto-grow
                  filled
                  rounded
                  rows="1"
                  row-height="15"
                ></v-textarea>
              </v-col>
              <v-col cols="12" lg="12">
                <v-file-input
                  @change="previewimage(image_low)"
                  v-model="image_low"
                  label="تصویر طرح ( با کیفیت پایین )"
                  filled
                  rounded
                  prepend-icon=""
                  show-size
                  truncate-length="50"
                  dense
                  append-icon="mdi-camera"
                ></v-file-input>
              </v-col>
              <v-col cols="12" lg="12">
                <v-card
                  max-height="400px"
                  v-show="url_low"
                  max-width="600px"
                  class="mx-auto rounded-xl"
                >
                  <v-img :src="url_low" max-height="400px" max-width="600px">
                  </v-img>
                </v-card>
              </v-col>
              <v-col cols="12" lg="12">
                <v-file-input
                  @change="previewimage(image_high)"
                  v-model="image_high"
                  label="تصویر طرح ( با کیفیت بالا )"
                  prepend-icon=""
                  filled
                  rounded
                  show-size
                  truncate-length="50"
                  dense
                  append-icon="mdi-camera"
                ></v-file-input>
              </v-col>
              <v-col cols="12" lg="12">
                <v-card
                  max-height="400px"
                  v-show="url_high"
                  max-width="600px"
                  class="mx-auto rounded-xl"
                >
                  <v-img :src="url_high" max-height="400px" max-width="600px">
                  </v-img>
                </v-card>
              </v-col>
              <v-col cols="3">
                <v-btn @click="send()">ارسال</v-btn>
              </v-col>
            </v-row>
          </v-container>
        </v-card-text>
      </v-card>
    </v-dialog>
    <v-overlay :value="loading" z-index="10000">
      <v-container justify-content-center>
        <v-row>
          <v-col>
            <v-progress-circular
              class="mx-auto"
              indeterminate
              size="64"
            ></v-progress-circular>
            <div class="mt-6 mx-auto">در حال ارسال طرح ...</div>
          </v-col>
        </v-row>
      </v-container>
    </v-overlay>
  </v-row>
</template>

<script>
import axios from "axios";
import moment from "moment-jalaali";
import "moment/locale/fa";
// import AutoComplete from "../components/AutoComplete.vue";
export default {
  name: "AddFrame",
  components: {},
  data() {
    return {
      name: "",
      date: new Date().toISOString().substr(0, 10),
      menu: false,
      description: "",
      image_low: null,
      image_high: null,
      url_low: null,
      url_high: null,
      items: ["uii", "uxx", "icon", "template", "html"],
      values: "",
      loading: false,
    };
  },
  methods: {
    hide() {
      this.$store.state.show = false;
    },

    send() {
      this.loading = true;
      this.$store.state.show = false;
      var new_design = {
        category: this.values,
        title: this.name,
        subtitle: this.description,
        created_at: this.date,
      };

      var formData = new FormData();
      for (var key in new_design) {
        formData.append(key, new_design[key]);
      }
      formData.append("image1", this.image_low);
      formData.append("image2", this.image_high);

      console.log(this.date);
      console.log(typeof this.date);

      for (var pair of formData.entries()) {
        console.log(pair[0] + ", " + pair[1]);
      }
      var that = this;
      const token = "32323JUHUHIUH63t6253523KSCJKH()1123(22(kir(@)";
      axios
        .post("https://hyponet.herokuapp.com/api/v1/design", formData, {
          headers: {
            "Content-Type": "multipart/form-data",
            Authorization: token,
          },
        })
        .then((response) => {
          that.loading = false;
          console.log(response.data);
        })

        .catch(function () {
          that.loading = false;
          console.log("FAILURE!!");
        });
    },

    previewimage(image) {
      if (image == this.image_low) {
        if (!image) {
          this.url_low = null;
        } else {
          this.url_low = URL.createObjectURL(image);
        }
      }
      if (image == this.image_high) {
        if (!image) {
          this.url_high = null;
        } else {
          this.url_high = URL.createObjectURL(image);
        }
      }
    },
  },
  mounted() {
    // if (!localStorage.id) {
    //   localStorage.setItem("id", this.$store.state.id);
    // }
    // console.log(localStorage.id);
    // if (localStorage.frame) {
    //   var saved = JSON.parse(localStorage.frame);
    //   var that = this;
    //   saved.forEach(function (i) {
    //     that.$store.state.frames.push(i);
    //   });
    //   console.log("yes");
    // }
    // console.log(this.$store.state.frames);
  },
  computed: {
    dateformatted() {
      moment.loadPersian({ dialect: "persian-modern" });
      return this.date ? moment(this.date).format("jDD / jMM / jYYYY ") : "";
    },
  },
};
</script>

<style lang="scss" scoped>
// .v-menu__content{
//   border-radius: 20px !important;
// }
// .loading{
//   transition:$primary-transition, z-index 1ms ;
// }
</style>
***********************************************************************
****************************PlanManage*********************************
<template>
  <v-container fluid class="pt-0">
    <v-row>
      <v-toolbar>
        <v-toolbar-title>مدیریت طرح ها</v-toolbar-title>
      </v-toolbar>
    </v-row>

    <v-row class="mt-4">
      <v-col md="6" sm="12" cols="12">
        <auto-complete
          :values="values"
          :items="items"
          :issolo="true"
          :isfilled="false"
        ></auto-complete>
      </v-col>
      <v-col md="3" sm="6" cols="6">
        <v-btn
          class="float-right"
          color="rgb(1, 8, 77)"
          rounded
          elevation="10"
          large
          text
        >
          نمایش طرح
          <v-icon right> mdi-monitor-edit </v-icon>
        </v-btn>
      </v-col>
      <v-col md="3" sm="6" cols="6">
        <v-btn
          class="float-left ml-2"
          color="rgb(1, 8, 77)"
          rounded
          elevation="10"
          large
          text
          @click.stop="$store.state.show = true"
        >
          افزودن طرح
          <v-icon right> mdi-plus-circle-outline </v-icon>
        </v-btn>
      </v-col>
    </v-row>

    <add-frame></add-frame>

    <v-row class="roww pt-10 mt-16">
      <v-col
        v-for="frame in $store.state.frames"
        cols="12"
        xs="12"
        sm="12"
        md="6"
        lg="4"
        :key="frame.id"
      >
        <skeleton-card v-if="isShow"></skeleton-card>
        <frame-card v-if="!isShow" :frame="frame"></frame-card>
      </v-col>
    </v-row>
  </v-container>
</template>
<script>
import FrameCard from "../components/FrameCard.vue";
import SkeletonCard from "../components/SkeletonCard.vue";
import AutoComplete from "../components/AutoComplete.vue";
import AddFrame from "../components/AddFrame.vue";
export default {
  name: "PlanManage",
  components: { AutoComplete, SkeletonCard, AddFrame, FrameCard },
  data() {
    return {
      isShow: true,
      i: 0,
      items: ["6", "4", "9", "0"],
      values: [],
    };
  },
  methods: {
    timing() {
      setTimeout(() => {
        this.isShow = false;
      }, 2000);
    },
    // add(value) {
    //   console.log(value);
    //   this.frames.push(value);
    // },
  },
  computed: {},
  mounted() {
    console.log(this.$store.state.show);
    if (this.i === 0) {
      this.timing();
      this.i = this.i + 1;
      console.log("hahaha");
    }
  },
};
</script>

<style lang="scss" scoped>
.roww {
  background-color: #e0e0e0;
  height: 100%;
}

button:hover {
  background-color: rgb(1, 8, 77);
  color: rgb(255, 255, 255) !important;
}
</style> 
**********************************************************************
**********************************planmanage**************************
<template>
  <v-container fluid class="pt-0">
    <v-row>
      <v-toolbar>
        <v-toolbar-title>مدیریت طرح ها</v-toolbar-title>
      </v-toolbar>
    </v-row>

    <v-row class="mt-4">
      <v-col md="6" sm="12" cols="12">
        <v-autocomplete
          lang="en"
          @change="log(values)"
          v-model="values"
          :items="items"
          deletable-chips
          chips
          color="rgb(1, 8, 77)"
          item-color="rgb(1, 8, 77)"
          rounded
          solo
          prefix="دسته بندی ها :"
        ></v-autocomplete>
      </v-col>
      <v-col md="3" sm="6" cols="6">
        <v-btn
          @click="showbyCat(values)"
          class="float-right"
          color="rgb(1, 8, 77)"
          rounded
          elevation="10"
          large
          text
        >
          نمایش طرح
          <v-icon right> mdi-monitor-edit </v-icon>
        </v-btn>
      </v-col>
      <v-col md="3" sm="6" cols="6">
        <v-btn
          class="float-left ml-2"
          color="rgb(1, 8, 77)"
          rounded
          elevation="10"
          large
          text
          @click.stop="$store.state.show = true"
        >
          افزودن طرح
          <v-icon right> mdi-plus-circle-outline </v-icon>
        </v-btn>
      </v-col>
    </v-row>

    <add-frame></add-frame>

    <v-row class="roww pt-10 mt-16">
      <v-col
        v-for="frame in $store.state.filteredframes"
        cols="12"
        xs="12"
        sm="12"
        md="6"
        lg="4"
        :key="frame.id"
      >
        <skeleton-card v-if="isShow"></skeleton-card>
        <frame-card v-if="!isShow" :frame="frame"></frame-card>
      </v-col>
    </v-row>
  </v-container>
</template>
<script>
import FrameCard from "../components/FrameCard.vue";
import SkeletonCard from "../components/SkeletonCard.vue";
// import AutoComplete from "../components/AutoComplete.vue";
import AddFrame from "../components/AddFrame.vue";
export default {
  name: "PlanManage",
  components: { SkeletonCard, AddFrame, FrameCard },
  data() {
    return {
      isShow: true,
      i: 0,
      items: ["uii", "uxx", "icon", "template", "html"],
      values: "",
      filtered_items: [],
    };
  },
  methods: {
    timing() {
      setTimeout(() => {
        this.isShow = false;
      }, 2000);
    },
    log(x) {
      console.log(x);
    },
    showbyCat(val) {
      console.log(val);
      // if (!val) {
      //   this.$store.state.filteredframes = this.$store.state.frames;
      // } else
      {
        this.$store.state.filteredframes = this.$store.state.frames.filter(
          (frame) => {
            return frame.category == val;
          }
        );
      }

      // this.$store.state.value=val;
      // this.$store.commit('showcat',val);
      // console.log(this.$store.getters.filtered)
    },
  },
  watch: {
    values: function (val) {
      if (!val) {
        this.$store.state.filteredframes = this.$store.state.frames;
      }
    },
  },
  computed: {},
  mounted() {
    this.$store.state.filteredframes = this.$store.state.frames;
    console.log(this.$store.state.show);

    this.timing();
    // this.i = this.i + 1;
    // console.log("hahaha");
  },
};
</script>

<style lang="scss" scoped >
.roww {
  background-color: #e0e0e0;
  height: 100%;
}

button:hover {
  background-color: rgb(1, 8, 77);
  color: rgb(255, 255, 255) !important;
}
</style> 

*********************************************************************
**********************************vuex*******************************
import Vue from 'vue';
import Vuex from 'vuex'
Vue.use(Vuex)

const store = new Vuex.Store({
    state: {
        show: false,
        id: 12,
        value: '',
        filteredframes: [],
        // frames: [],
        frames: [{
                id: 0,
                name: "طرح شماره اول",
                date: "14-08-1378",
                image: require("../assets/images/1.jpg"),
                description: "این طرح شماره اول است",
                category: "uxx"

            },
            {
                id: 1,
                name: "طرح شماره دوم",
                date: "23-10-1384",
                image: require("../assets/images/2.jpg"),
                description: "این طرح شماره دوم است",
                category: "uii"
            },
            {
                id: 2,
                name: "طرح شماره سوم",
                date: "28-3-1381",
                image: require("../assets/images/3.jpg"),
                description: "این طرح شماره سوم است",
                category: "template",
            },
            {
                id: 3,
                name: "طرح شماره چهارم",
                date: "9-09-1399",
                image: require("../assets/images/4.jpg"),
                description: "این طرح شماره چهارم است",
                category: "html",
            },
            {
                id: 4,
                name: "طرح شماره پنجم",
                date: "12-11-1323",
                image: require("../assets/images/5.jpg"),
                description: "این طرح شماره پنجم است",
                category: "icon",
            },
            {
                id: 5,
                name: "طرح شماره ششم",
                date: "12-11-1302",
                image: require("../assets/images/6.jpg"),
                description: "این طرح شماره ششم است",
                category: "html"
            },
            {
                id: 6,
                name: "طرح شماره هفتم",
                date: "22-03-1333",
                image: require("../assets/images/1.jpg"),
                description: "این طرح شماره هفتم است",
                category: "uii",
            },
            {
                id: 7,
                name: "طرح شماره هشتم",
                date: "30-08-1398",
                image: require("../assets/images/2.jpg"),
                description: "این طرح شماره هشتم است",
                category: "uxx",
            },
            {
                id: 8,
                name: "طرح شماره نهم",
                date: "12-08-1399",
                image: require("../assets/images/3.jpg"),
                description: "این طرح شماره نهم است",
                category: "html"
            },
            {
                id: 9,
                name: "طرح شماره دهم",
                date: "14-08-1388",
                image: require("../assets/images/4.jpg"),
                description: "این طرح شماره دهم است",
                category: "icon"
            },
            {
                id: 10,
                name: "طرح شماره یازدهم",
                date: "24-08-1400",
                image: require("../assets/images/5.jpg"),
                description: "این طرح شماره یازدهم است",
                category: "uii",
            },
            {
                id: 11,
                name: "طرح شماره دوازدهم",
                date: "16-06-1312",
                image: require("../assets/images/6.jpg"),
                description: "این طرح شماره دوازدهم است",
                category: "uxx",
            },
        ],
    },
    mutations: {
        // showcat(state, val) {
        //     state.frames = state.frames.filter((frame) => {
        //         return frame.category == val;
        //     });
        // }
    },
    getters: {
        // filtered: (state) => {
        //     return state.frames.filter(frame => {
        //         return (frame.category == state.value);
        //     })
        // }
    },
    actions: {

    }
})

export default store

***********************************************************************

<v-row class="roww pt-10 mt-16">
      <v-col
        v-for="frame in $store.state.filteredframes"
        cols="12"
        xs="12"
        sm="12"
        md="6"
        lg="4"
        :key="frame.id"
      >
        <skeleton-card v-if="isShow"></skeleton-card>
        <frame-card v-if="!isShow" :frame="frame"></frame-card>
      </v-col>
    </v-row>

****************************************framepost**************************

<template>
  <v-container fluid class="pt-0">
    <v-row>
      <v-toolbar>
        <v-toolbar-title>{{ frame.title }}</v-toolbar-title>
      </v-toolbar>
    </v-row>
    <v-row v-if="!isload">
      <v-col cols="6">
        <v-card class="mx-auto rounded-xl">
          <v-img
            :src="`https://hyponet.herokuapp.com${frame.image2}`"
            max-height="400"
          ></v-img>
        </v-card>
      </v-col>
      <v-col cols="6">
        <v-hover v-slot="{ hover }">
          <v-card class="mx-auto rounded-xl">
            <v-img
              :src="`https://hyponet.herokuapp.com${frame.image1}`"
              max-height="400"
            >
              <v-expand-transition>
                <div
                  v-if="hover"
                  class="d-flex transition-fast-in-fast-out black darken-4 v-card--reveal display-1 white--text"
                  style="height: 100%"
                >
                  <v-btn width="100%" height="100%" class="transparent white--text ">
                    <p>برای ویرایش کلیلک کنید</p>
                  </v-btn>
                </div>
              </v-expand-transition>
            </v-img>
          </v-card>
        </v-hover>
      </v-col>
    </v-row>
    <v-row>
      <v-col>
        
      </v-col>
    </v-row>
  </v-container>
</template>
<script>
import axios from "axios";
export default {
  name: "FramePost",
  data() {
    return {
      isload: true,
      frame: {},
    };
  },
  methods: {
    getdata() {
      var idd = this.$route.params.id;
      console.log(idd);
      axios
        .get(`https://hyponet.herokuapp.com/api/v1/design/${idd}`)
        .then((response) => {
          console.log(idd);
          console.log(response.data);
          this.frame = response.data;
          this.isload = false;
        })
        .catch((e) => {
          console.log(e);
          console.log("error");
        });
    },
  },
  created() {
    this.getdata();
  },
  watch: {
    $route: function (to, from) {
      // console.log(to)
      console.log(from);
      if (to.name == "Posts") {
        this.frame = {};
        this.getdata();
      }
    },
  },
};
</script>
<style lang="scss">
.v-card--reveal {
  align-items: center;
  bottom: 0;
  justify-content: center;
  opacity: 0.5;
  position: absolute;
  width: 100%;
}
</style>
**************************************************************

async edit() {
      var edited_design = {
        category: this.frame.category,
        title: this.frame.title,
        subtitle: this.frame.subtitle,
        created_at: this.frame.created_at,
      };

      var formData = new FormData();
      for (var key in edited_design) {
        formData.append(key, edited_design[key]);
      }

      //*************************************************************************************** */
      if (this.image_low === null) {
        let that = this;
        await axios({
          url: `https://hyponet.herokuapp.com${this.frame.image1}`,
          method: "GET",
          responseType: "arraybuffer",
        })
          .then((response) => {
            that.image_low = btoa(
              new Uint8Array(response.data).reduce(
                (data, byte) => data + String.fromCharCode(byte),
                ""
              )
            );
            formData.append("image1", that.image_low);
            console.log("hello");
            console.log(that.image_low);
            let a = `data:${response.headers[
              "content-type"
            ].toLowerCase()};base64,${that.image_low}`;
            console.log("a", a);
          })
          // .then((response) => {
          //   console.log("getting image");
          //   that.image_low = response.data;
          //   console.log(response.data)
          //   // var file_url = URL.createObjectURL(new Blob([response.data]));
          //   formData.append("image1", that.image_low);
          //   console.log("hello");
          // })
          .catch((e) => {
            console.log(e);
          });
      } else {
        console.log("is not null");
      }

      //*************************************************************************************** */
      // if (this.image_high === null) {
      //   let that = this;
      //   this.image_high = await axios
      //     .get(`https://hyponet.herokuapp.com${this.frame.image2}`)
      //     .then((response) => {
      //       console.log("getting image");
      //       that.image_high = response.data;
      //       formData.append("image2", that.image_high);
      //       console.log("hello");
      //     })
      //     .catch((e) => {
      //       console.log(e);
      //     });
      // } else {
      //   console.log("is not null");
      // }
      //***************************************************************************************
      for (var pair of formData.entries()) {
        console.log(pair[0] + ", " + pair[1]);
      }
      //***************************************************************************************
      // let that = this;
      // const token = "32323JUHUHIUH63t6253523KSCJKH()1123(22(kir(@)";
      // var frame_id = this.$route.params.id;
      // axios
      //   .put(
      //     `https://hyponet.herokuapp.com/api/v1/design/${frame_id}`,
      //     formData,
      //     {
      //       headers: {
      //         "Content-Type": "multipart/form-data",
      //         Authorization: token,
      //       },
      //     }
      //   )
      //   .then((response) => {
      //     console.log(response.data);
      //     console.log(that.url_low);
      //     that.getData;
      //   })

      //   .catch(function (e) {
      //     console.log(e);
      //   });
      //***************************************************************************************
    },
  },
//***************************************************************************************
